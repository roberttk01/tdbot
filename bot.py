import discord
import openai
import random
import json

# Load configuration from file
with open('config.json', 'r') as config_file:
    config = json.load(config_file)

# Set up intents
intents = discord.Intents.default()
intents.message_content = True

# Initialize the Discord client with intents
client = discord.Client(intents=intents)
openai.api_key = config['openai_api_key']


# Load truth and dare data
def load_data():
    with open('questions.json', 'r') as f:
        data = json.load(f)
    return data['truths'], data['dares']


truths, dares = load_data()


# Function to create the embed
def create_embed(message, title, description, question_type, question_id, value):
    embed = discord.Embed(
        title=title,
        description=description,
        color=discord.Color.blue()
    )
    embed.add_field(name="ðŸ’¡ Question", value=value, inline=False)
    embed.set_footer(text=f"Type: {question_type} | Rating: PG | ID: {question_id}")
    embed.set_author(name=f"Requested by {message.author.name}", icon_url=message.author.avatar.url)
    return embed


# Function to create buttons
def create_buttons():
    buttons = discord.ui.View()
    buttons.add_item(discord.ui.Button(label="Truth", style=discord.ButtonStyle.success, custom_id="truth"))
    buttons.add_item(discord.ui.Button(label="Dare", style=discord.ButtonStyle.danger, custom_id="dare"))
    buttons.add_item(discord.ui.Button(label="GPTruth", style=discord.ButtonStyle.primary, custom_id="gptruth"))
    return buttons


@client.event
async def on_ready():
    print(f'We have logged in as {client.user}')


@client.event
async def on_message(message):
    if message.author == client.user:
        return

    # /loftruth Command
    if message.content.lower().startswith('/loftruth'):
        question = random.choice(truths)
        embed = create_embed(
            message=message,  # Pass the whole message object here
            title="Truth Question ðŸŽ­",
            description="Here's a truth question for you:",
            question_type="TRUTH",
            question_id="1234abcd",
            value=question
        )
        await message.channel.send(embed=embed, view=create_buttons())

    # /lofdare Command
    elif message.content.lower().startswith('/lofdare'):
        question = random.choice(dares)
        embed = create_embed(
            message=message,  # Pass the whole message object here
            title="Dare Challenge ðŸ”¥",
            description="Here's a dare challenge for you:",
            question_type="DARE",
            question_id="5678efgh",
            value=question
        )
        await message.channel.send(embed=embed, view=create_buttons())

    # /gptruth Command
    elif message.content.lower().startswith('/gptruth'):
        prompt = "Generate a fun truth question for a truth or dare game."
        try:
            response = openai.ChatCompletion.create(
                model="gpt-4",  # Ensure you have GPT-4 access
                messages=[{"role": "user", "content": prompt}]
            )
            gpt_response = response['choices'][0]['message']['content'].strip()

            embed = create_embed(
                message=message,  # Pass the whole message object here
                title="ðŸ¤– ChatGPT Truth",
                description="Here's a truth question generated by GPT:",
                question_type="GPT-TRUTH",
                question_id="9876ijkl",
                value=gpt_response
            )
            await message.channel.send(embed=embed, view=create_buttons())
        except Exception as e:
            await message.channel.send(f"Error: {str(e)}")


# Button Interaction Handling
@client.event
async def on_interaction(interaction):
    if interaction.type == discord.InteractionType.component:
        custom_id = interaction.data['custom_id']  # Correctly access the custom_id

        if custom_id == "truth":
            question = random.choice(truths)  # Get a random truth question
            embed = create_embed(
                message=interaction.message,  # Passing the message object for the author info
                title="Requested by {interaction.user.name}",
                description="Here's another truth question for you:",
                question_type="TRUTH",
                question_id="t75qcvn8j3w",  # You can use a dynamic ID if needed
                value=question
            )
            await interaction.response.send_message(embed=embed, view=create_buttons())

        elif custom_id == "dare":
            dare = random.choice(dares)  # Get a random dare
            embed = create_embed(
                message=interaction.message,  # Passing the message object for the author info
                title="Requested by {interaction.user.name}",
                description="Here's another dare challenge for you:",
                question_type="DARE",
                question_id="d45pocx7h1",  # You can use a dynamic ID if needed
                value=dare
            )
            await interaction.response.send_message(embed=embed, view=create_buttons())

        elif custom_id == "gptruth":
            # Generate a new truth question using GPT-4
            try:
                response = openai.ChatCompletion.create(
                    model="gpt-4",
                    messages=[{"role": "user", "content": "Generate a fun truth question for truth or dare."}]
                )
                gpt_response = response['choices'][0]['message']['content'].strip()
                embed = create_embed(
                    message=interaction.message,  # Passing the message object for the author info
                    title="ðŸ¤– GPT Truth",
                    description="Here's a truth question generated by GPT-4:",
                    question_type="GPT-TRUTH",
                    question_id="g65ocvn3r9",  # You can use a dynamic ID if needed
                    value=gpt_response
                )
                await interaction.response.send_message(embed=embed, view=create_buttons())
            except Exception as e:
                await interaction.response.send_message(f"Error: {str(e)}")


client.run(config['discord_token'])
